Script started on Mon 04 Mar 2013 11:16:18 AM EST
]0;dumas_ms@cobra:~/CSC245/Prog2[?1034h[dumas_ms@cobra Prog2]$ cat postfix.cpp
#include <cstring>
#include <string>
#include "stack.h"
#include <iostream>
#include <boost/algorithm/string.hpp>
#include <vector>

using namespace std;
using namespace boost;

bool iscorrect(string input);
void evaluate (string input);

stack<int> mystack(15);


void print(vector <string> & v);
void det_case(string input);
void push_numb(int x);
void perform_op(char op);
class DivisionByZero{};

int main()
{
	
	char command = '-';
	string input = "";
	bool again = false;

	do{
		cout << "\n\t\t\t\t\t:) :) :) :) :) :) :) :) :)\tTHE POSTFIX EVALUATOR\t:) :) :) :) :) :) :) :) :)\n" << endl;
		cout << "Enter a PostFix Mathmatical Expression: ";
		getline(cin,input);

		if(iscorrect(input))
		det_case(input);
	
		cout << "\nGo Again? (Y/N) ";
		cin >> command;
		switch (command)
		{	case 'Y':
			again = true;
			mystack.makeEmpty(); //clear stack
			break;
			case 'N':
			again = false;
			break;
			default:
			cout << "Incorrect entry, now Exiting" << endl;
			again = false;
			break;
		}
	}while(again);

	return 0;
	
}


bool iscorrect(string input)
{
	int index;
	int non_space_chars_checked = 0;
	int int_count = 0;

	bool validity = false;
	

	//Check if last char is a semicolon
	if( input.at( input.length()-1 ) == ';')
	validity = true;
	else
	{cout << "You Forgot your semicolon" << endl;	
	return false;}


	//Check for Appropriate Chars
	index = 0;
	do
	{
		switch(input.at(index))
		{	case' ':
			case'+':
			case'-':
			case'*':
			case'/':
			case'%':
			case'_':
			case';':
			validity = true;
			index++;
			break;
	
			default:
				if( isdigit( input.at(index) ) )
				validity = true;
				else
				{cout << "Exception -- You have enetered an unnacepptable character. Now Exiting" << endl;
				return false;}
	
				index++;
			break;
		}
	}while(index < input.length() );
	 
	//Checking if first two chars are operands
	index = 0;
	while( (int_count < 2) && (non_space_chars_checked < 2) && (index < input.length()) )
	{	

		while( ( input.at(index) == ' ') || ( input.at(index) == '_' ) ) //skip spaces and underscores until we get to non space/underscore
		{	index++; }

		if( !isdigit(input.at(index)) ) //If char at current index is not a digit
		{non_space_chars_checked++;
		index++;}

		if( isdigit(input.at(index)) ) //If char at current index is a digit
		{int_count++;
		index++;
		non_space_chars_checked++;}
	}
	//stop when we've counted 2 ints or when we've checked the first 2 non space chars, whichever comes first. 
	if(int_count >= 2)
	validity = true;
	else if(non_space_chars_checked >= 2)
	{validity = false;
	cout << "First two non-space chars are not integers thus your postfix expression will cause a stack underflow" << endl;}

	return validity;
}


//Print out a vector
void print(vector <string> & v)
{
	for (size_t n = 0; n < v.size(); n++)
	cout << "\"" << v[n] << "\"\n";
	cout << endl;
}


void det_case(string input)
{
	//Method to determine what case each field is and send it to an appropriate method to be handled
	vector <string> fields;

	split( fields, input, is_any_of(" ") );


	//Convert split fieldsto a c string so that they can be converted to an int
	//	int a = atoi( fields[0].c_str() );
	//	int b = atoi( fields[1].c_str() );



	int v_index,s_index,a;
	bool alldigit;
	string stemp = "";
	for(v_index = 0; v_index < fields.size(); v_index++)
	{
		stemp = fields[v_index];
		alldigit = true;
		
		//Case that a field consist of only integers
		if( stemp.at(stemp.length()-1) != ';' )//if current field does not contain the semicolon check whole field
		for(s_index = 0; s_index < stemp.length(); s_index++)
		{	if( !isdigit( stemp.at(s_index) ) ) //If any char is not a digit
			alldigit = false; }


		if( stemp.at(stemp.length()-1) == ';' ) //if current field contains the semicolon, exclude semicolon when checking
			for(s_index = 0; s_index < stemp.length()-1; s_index++)
			{	if( !isdigit( stemp.at(s_index) ) ) //If any char is not a digit
				alldigit = false; }

		if(alldigit)
		push_numb( atoi (stemp.c_str()) );
	
		//Case that a field consists of only an operation
		if(stemp.length() == 1)
		{	 switch ( stemp.at(0) )
			{	case'+':
				case'-':
				case'*':
				case'/':
				case'%':
				perform_op(stemp.at(0));	
				break;

				default:
				break;
				
			}
		}

		//If the length is 2 and the field consists of a operation followed by a semicolon example +;
		if( (stemp.length() == 2) && (stemp.at(1) == ';') )
		{	 switch ( stemp.at(0) )
			{	case'+':
				case'-':
				case'*':
				case'/':
				case'%':
				perform_op(stemp.at(0));	
				break;

				default:
				break;
			}
		}

		
		//If the length is 2 and the field consists of a underscore followed by a int;
		if( (stemp.length() == 2) && (stemp.at(0) == '_') )
		{
				 
			a = stemp.at(1) - '0'; //Converting single char to int
			push_numb(a*-1);	
			
		}

		//Finally send the semicolon if this field contains the semicolon
		if( stemp.at( stemp.length()-1) == ';' )
		perform_op(stemp.at(stemp.length()-1));

	}
		fields.clear();	
}	

void push_numb(int x)
{
	cout << "Token = " << x << "\tpush " << x << endl;
	mystack.push(x);

}

void perform_op(char op) //Operation comming in should only be a single char
{

	int result;
	switch (op)
	{	case'+':
		case'-':
		case'*':
		case'/':
		case'%':
		{	cout << "Token = " << op;
			int b = mystack.top();
			cout << "\tPop " << b;
			mystack.pop();
			int a = mystack.top();
			cout << "\tPop " << a;
			mystack.pop();	
			cout << "\tPush ";
			if(op == '+')
				{result = a + b;
				mystack.push(result);
				cout << result;}
			if(op == '-')
				{result = a - b;
				mystack.push(result);
				cout << result;}
			if(op == '*')
				{result = a * b;
				mystack.push(result);
				cout << result;}
			if(op == '/')
				{
				    try
					{ 
						if(b == 0)
						throw DivisionByZero();
						else
						{result = a / b; 
						mystack.push(result);
						cout << result;}
					}
					catch (DivisionByZero exc)
					 { cout << "\nDivision By Zero Exception -- Now Exiting." << endl;	
						exit(1);	 }
				}
			if(op == '%')
				{result = a % b;
				mystack.push(result);
				cout << result;}

			cout << endl;
		}
		break;

		case ';':
		cout << "Token = " << op << "\tPop " <<  mystack.top() << endl;
		break;


	}

}

]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ clear
[H[2J]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ cat [K[K[K[Kclearat postfix.cppexit[Kc++ -o postfix.out postfix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Clear[K++ -o postfix.out postfix.cpp
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ c++ -o postfix.out postfix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Clear[Kat postfix.cppexit[Kc++ -o postfix.out postfix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Clear[Kat postfix.cppexit[Kvi postfix.cppls[Kcd Prog2ls[Kcd CSC245ls[Kexit[1P:wqvi myBet.cpp[1P./myBet.outc++ -o myBet.out myBet.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[14Pvi[C[C[C[C[C[C[C[C[C[C[14@c++ -o myBet.out[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[14Pvi[C[C[C[C[C[C[C[C[C[C[14@c++ -o myBet.out[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[14Pvi[C[C[C[C[C[C[C[C[C[C[14@c++ -o myBet.out[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[15P./myBet.outc++ -o myBet.out myBet.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[15P./myBet.out[K[K[K[K[K[K[K[K[Kpostfix.out

					:) :) :) :) :) :) :) :) :)	THE POSTFIX EVALUATOR	:) :) :) :) :) :) :) :) :)

Enter a PostFix Mathmatical Expression: 8 2 _1 + / 15 *;
Token = 8	push 8
Token = 2	push 2
Token = -1	push -1
Token = +	Pop -1	Pop 2	Push 1
Token = /	Pop 1	Pop 8	Push 8
Token = 15	push 15
Token = *	Pop 15	Pop 8	Push 120
Token = ;	Pop 120

Go Again? (Y/N) N
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ ./postfix.out

					:) :) :) :) :) :) :) :) :)	THE POSTFIX EVALUATOR	:) :) :) :) :) :) :) :) :)

Enter a PostFix Mathmatical Expression: 8 2 1 + / 15 $ ;
Exception -- You have enetered an unnacepptable character. Now Exiting

Go Again? (Y/N) N
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ ./postfix.outc++ -o postfix.out postfix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[17P./postfix.out

					:) :) :) :) :) :) :) :) :)	THE POSTFIX EVALUATOR	:) :) :) :) :) :) :) :) :)

Enter a PostFix Mathmatical Expression: 1 0 / ;
Token = 1	push 1
Token = 0	push 0
Token = /	Pop 0	Pop 1	Push 
Division By Zero Exception -- Now Exiting.
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ clear
[H[2J]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ cat B[KmyBet.cpp
#include <string>
#include "stack.h"
#include <iostream>
#include <vector>
#include <fstream>

using namespace std;

struct BetNode
{
	char info;
	BetNode* left;
	BetNode* right;
};


vector <char> postfix;
void in_to_post(string input);
bool higherPrecedence (char top, char input);
stack <char> mystack(60);
void post_to_tree(char currchar);
void pre_traversal(BetNode* t);



stack <BetNode*> BetStack(60);

int main()
{
	ifstream infile;
	infile.open("infix.dat");

	string content = "";
	int i;

	while(infile) //Open file get the first string
	{
			//get current line from file and store it in a string
			getline(infile,content);

			//Print out the original line from string
			cout << "\nOriginal:\t" << content << endl;
			in_to_post(content);

			//Print out postfix expression
			cout << "Postfix:\t";
			for (i = 0; i < postfix.size(); i++)
			cout <<	postfix[i];
			cout << endl;

			//Get each char from post fix expression & send it to a method to create the BET tree
			for (i = 0; i < postfix.size(); i++)
			post_to_tree( postfix[i] ); 

			//Once tree is constructed do a pre-traversal to get pre-fix printout
			//Top item on stack is root of our tree
			cout << "Prefix:\t\t";
			pre_traversal(BetStack.top());
			cout << endl <<endl;
			

			postfix.clear(); //Must clear vector so that it is ready for next line in file

			while( !mystack.isEmpty() ) //Must also clear the stack
			mystack.pop();	
		
			while( !BetStack.isEmpty() ) //Must also clear BET stack and free up allocated pointer memory.
			{delete	BetStack.top();
			BetStack.top() == NULL;
			BetStack.pop();	}
	

	}
		infile.close();


return 0;
}

void in_to_post(string input)
{
	int index = 0;
	char character = ' ';
	char top = ' ';

	for(int i = 0; i < input.length(); i++)
	{	character =  input.at(index);
		switch(character)
		{
			case'(':
			mystack.push(character);
			break;
	
			case ' ':		
			break;
	
			case '+': 
			case '-': 
			case '*': 
			case '/':
				{top = mystack.top();
				if ( higherPrecedence(top, character) )
				mystack.push(character);
				else
				postfix.push_back(character);}
			break;
	
			case ')':
				{ top = mystack.top();
					while(top != '(')
					{ postfix.push_back(top);
					  mystack.pop();
					  top = mystack.top(); 
					}
				}
			break;
			
			default:
				//If current char from our string is a digit add it to our expression
				if( isdigit(character) )	
				postfix.push_back(character);
				
			break;
		}
		index++;
	}


}

bool higherPrecedence (char top, char input)
{
	if(top == input)
	return true;
	if( (top == '*') || (top == '/') )
	return true;
	if( (top == '+') || (top == '-') )
		if( (input == '+') || (input == '-'))
			return true;
	if( top == '(' )
	return true;
	return false;
}

void post_to_tree(char currchar)
{

	BetNode* t;
	t = new BetNode;
	t -> info = currchar;

	if( isdigit(currchar) )
	BetStack.push(t);
	else
	{	t -> right = BetStack.top();
		BetStack.pop();
		t -> left = BetStack.top();
		BetStack.pop();
		BetStack.push(t);
	}


}


void pre_traversal(BetNode* t)
{

	if(t != NULL )
	{
		cout << t -> info;
		pre_traversal( t -> left );
		pre_traversal( t -> right);

	}

}
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ clear
[H[2J]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ clearat myBet.cpp[8Plear./postfix.outc++ -o postfix.out postfix.cpp[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Clear[K++ -o postfix.out postfix.cpp[1P[1P[1P[1P[1P[1P[1P[1@m[1@y[1@B[1@e[1@t[C[C[C[C[C[C[C[C[C[C[C[C[C[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cpp[1P.cppm.cppy.cppB.cppe.cppt.cpp
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ c++ -o myBet.out myBet.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K./myBet.out

Original:	(3 + 4)
Postfix:	34+
Prefix:		+34


Original:	((5 + 4) * 8)
Postfix:	54+8*
Prefix:		*+548


Original:	((0 * (1 + 2)) / (3 - (4  +  5))  *  (6 / 7 / (8 * 9)))
Postfix:	012+345+6789*
Prefix:		*89


Original:	
Postfix:	
terminate called after throwing an instance of 'Underflow'
Prefix:		Aborted (core dumped)
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ cat infix.dat
(3 + 4)
((5 + 4) * 8)
((0 * (1 + 2)) / (3 - (4  +  5))  *  (6 / 7 / (8 * 9)))
]0;dumas_ms@cobra:~/CSC245/Prog2[dumas_ms@cobra Prog2]$ exit
exit

Script done on Mon 04 Mar 2013 11:18:58 AM EST
